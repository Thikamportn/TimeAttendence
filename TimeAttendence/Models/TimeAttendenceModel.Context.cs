//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TimeAttendence.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TimeAttendence2Entities : DbContext
    {
        public TimeAttendence2Entities()
            : base("name=TimeAttendence2Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<TestCheckedTime> TestCheckedTimes { get; set; }
    
        public virtual ObjectResult<GetDailyRecordssp_Result> GetDailyRecordssp(Nullable<System.DateTime> days)
        {
            var daysParameter = days.HasValue ?
                new ObjectParameter("days", days) :
                new ObjectParameter("days", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDailyRecordssp_Result>("GetDailyRecordssp", daysParameter);
        }
    
        public virtual ObjectResult<GetMonthsRecordssp_Result> GetMonthsRecordssp(Nullable<int> month, Nullable<int> year)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMonthsRecordssp_Result>("GetMonthsRecordssp", monthParameter, yearParameter);
        }
    
        public virtual ObjectResult<TestCheckedTime> GetFunctionDay(Nullable<System.DateTime> days)
        {
            var daysParameter = days.HasValue ?
                new ObjectParameter("days", days) :
                new ObjectParameter("days", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TestCheckedTime>("GetFunctionDay", daysParameter);
        }
    
        public virtual ObjectResult<TestCheckedTime> GetFunctionDay(Nullable<System.DateTime> days, MergeOption mergeOption)
        {
            var daysParameter = days.HasValue ?
                new ObjectParameter("days", days) :
                new ObjectParameter("days", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TestCheckedTime>("GetFunctionDay", mergeOption, daysParameter);
        }
    
        public virtual ObjectResult<TestCheckedTime> GetFunctionMonth(Nullable<int> month, Nullable<int> year)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TestCheckedTime>("GetFunctionMonth", monthParameter, yearParameter);
        }
    
        public virtual ObjectResult<TestCheckedTime> GetFunctionMonth(Nullable<int> month, Nullable<int> year, MergeOption mergeOption)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TestCheckedTime>("GetFunctionMonth", mergeOption, monthParameter, yearParameter);
        }
    }
}
